syntax = "proto2";
import "def.proto";
option go_package = "./neonize";
package neonize;

//types
message JID {
    required string User = 1;
    required uint32 RawAgent  = 2;
    required uint32 Device = 3;
    required uint32 Integrator= 4;
    required string Server=5;
    required bool IsEmpty = 6;
}
message MessageInfo{
    required MessageSource MessageSource = 1;
    required string ID = 2;
    required int64 ServerID = 3;
    required string Type = 4;
    required string Pushname = 5;
    required int64 Timestamp = 6;
    required string Category = 7;
    required bool Multicast = 8;
    required string MediaType = 9;
    required string Edit = 10; //enum
    optional VerifiedName VerifiedName = 11;
    optional DeviceSentMeta DeviceSentMeta = 12;
}
message UploadResponse {
    required string url = 1;
    required string DirectPath = 2;
    required string Handle = 3;
    required bytes MediaKey = 4;
    required bytes FileEncSHA256 = 5;
    required bytes FileSHA256 = 6;
    required uint32 FileLength = 7;
}
message MessageSource {
    required JID Chat = 1;
    required JID Sender = 2;
    required bool IsFromMe = 3;
    required bool IsGroup = 4;
    required JID BroadcastListOwner = 5;
}
message DeviceSentMeta {
    required string DestinationJID = 1;
    required string Phash = 2;
}
// message MessageInfo{
//     required MessageSource MessageSource = 1;
//     required string ID = 2;
//     required string ServerID=3;
//     required string Type = 4;
//     required string PushName = 5;
//     required uint64 Timestamp = 6;
//     required string Category = 7;
//     required bool Multicast = 8;
//     required string MediaType = 9;
//     required string EditAttribute = 10;

// }
message VerifiedName {
    optional defproto.VerifiedNameCertificate Certificate = 1;
    optional defproto.VerifiedNameCertificate.Details Details = 2;
}
message IsOnWhatsAppResponse {
    required string Query = 1;
    required JID JID = 2;
    required bool IsIn = 3;
    optional VerifiedName VerifiedName = 4;
}

message UserInfo {
    optional VerifiedName VerifiedName = 1;
    required string Status = 2;
    required string PictureID = 3;
    repeated JID Devices = 4;
}

message Device {
    optional JID JID = 1;
    required string Platform = 2;
    required string BussinessName = 3;
    required string PushName = 4;
    required bool Initialized = 5;
}


// GROUP
message GroupName {
    required string Name = 1;
    required int64 NameSetAt=2;
    required JID NameSetBy=3;
}
message GroupTopic{
    required string Topic = 1;
    required string TopicID = 2;
    required int64 TopicSetAt = 3;
    required JID TopicSetBy = 4;
    required bool TopicDeleted = 5;
}
message GroupLocked {
    required bool isLocked = 1;
}
message GroupAnnounce {
    required bool IsAnnounce = 1;
    required string AnnounceVersionID = 2;
}
message GroupEphemeral{
    required bool IsEphemeral = 1;
    required uint32 DisappearingTimer = 2;
}
message GroupIncognito{
    required bool IsIncognito = 1;
}
message GroupParent {
    required bool IsParent = 1;
    required string DefaultMembershipApprovalMode = 2;
}
message GroupLinkedParent {
    required JID LinkedParentJID = 1;
}
message GroupIsDefaultSub {
    required bool IsDefaultSubGroup = 1;
}
message GroupParticipantAddRequest {
    required string Code = 1;
    required float Expiration = 2;
}
message GroupParticipant {
    optional JID JID = 1;
    required JID LID = 2;
    required bool IsAdmin = 3;
    required bool IsSuperAdmin = 4;
    required string DisplayName = 5;
    required int32 Error = 6;
    optional GroupParticipantAddRequest AddRequest = 7;
}
message GroupInfo{
    required JID OwnerJID=2;
    required JID JID=1;
    required GroupName GroupName = 3;
    required GroupTopic GroupTopic = 4;
    required GroupLocked GroupLocked = 5;
    required GroupAnnounce GroupAnnounce = 6;
    required GroupEphemeral GroupEphemeral = 7;
    required GroupIncognito GroupIncognito = 8;
    required GroupParent GroupParent = 9;
    required GroupLinkedParent GroupLinkedParent = 10;
    required GroupIsDefaultSub GroupIsDefaultSub = 11;
    required float GroupCreated = 12;
    required string ParticipantVersionID = 13;
    repeated GroupParticipant Participants = 14;
    enum MemberAddMode {
        GroupMemberAddModeAdmin = 1;
    }
}
message MessageDebugTimings{
    required int64 Queue = 1;
    required int64 Marshal = 2;
    required int64 GetParticipants = 3;
    required int64 GetDevices = 4;
    required int64 GroupEncrypt = 5;
    required int64 PeerEncrypt = 6;
    required int64 Send = 7;
    required int64 Resp = 8;
    required int64 Retry = 9;
}
message SendResponse {
    required int64 Timestamp = 1;
    required string ID = 2;
    required int64 ServerID = 3;
    required MessageDebugTimings DebugTimings = 4;
}

message SendMessageReturnFunction {
    optional string Error = 1;
    optional SendResponse SendResponse = 2;
}








//Function
message GetGroupInfoReturnFunction{
    optional GroupInfo GroupInfo = 1;
    optional string Error = 2;
}
message JoinGroupWithLinkReturnFunction{
    optional string Error = 1;
    optional JID Jid = 2;
}
message GetGroupInviteLinkReturnFunction{
    optional string InviteLink = 1;
    optional string Error = 2;
}
message DownloadReturnFunction {
    optional bytes Binary = 1;
    optional string Error = 2;
}
message UploadReturnFunction {
    optional UploadResponse UploadResponse = 1;
    optional string Error = 2;
}

message SetGroupPhotoReturnFunction {
    required string PictureID = 1;
    optional string Error = 2;
}
message IsOnWhatsAppReturnFunction {
    repeated IsOnWhatsAppResponse IsOnWhatsAppResponse = 1;
    optional string Error = 2;
}
message GetUserInfoSingleReturnFunction {
    optional JID JID = 1;
    optional UserInfo UserInfo = 2;
}
message GetUserInfoReturnFunction {
    repeated GetUserInfoSingleReturnFunction UsersInfo = 1;
    optional string Error = 2;
}
message BuildPollVoteReturnFunction {
    optional defproto.Message PollVote = 1;
    optional string Error = 2;
}
message CreateNewsLetterReturnFunction{
    optional NewsletterMetadata NewsletterMetadata = 1;
    optional string Error = 2;
}
message GetBlocklistReturnFunction{
    optional Blocklist Blocklist = 1;
    optional string Error = 2;
}
message ReqCreateGroup {
    required string name = 1;
    repeated JID Participants = 2;
    required string CreateKey = 3;
    optional GroupParent GroupParent = 4;
    optional GroupLinkedParent GroupLinkedParent = 5;
}
message JIDArray {
    repeated JID JIDS = 1;
}

message ArrayString {
    repeated string data = 1;
}
message NewsLetterMessageMeta {
    required int64 EditTS = 1;
    required int64 OriginalTS = 2; 
}
message Message {
    required MessageInfo Info = 1;
    optional defproto.Message Message = 2;
    required bool IsEphemeral = 3;
    required bool IsViewOnce = 4;
    required bool IsViewOnceV2 = 5;
    required bool IsEdit = 6;
    optional defproto.WebMessageInfo SourceWebMsg = 7;
    required string UnavailableRequestID = 8;
    required int64 RetryCount = 9;
    optional NewsLetterMessageMeta NewsLetterMeta = 10;
}
message CreateNewsletterParams {
    required string Name = 1;
    required string Description = 2;
    required bytes Picture = 3;
}
message WrappedNewsletterState {
    enum NewsletterState {
        ACTIVE = 1;
        SUSPENDED = 2;
        GEOSUSPENDED = 3;
    }
    required NewsletterState Type = 1;
}
message NewsletterText {
    required string Text = 1;
    required string ID = 2;
    required int64 UpdateTime = 3;
}
message ProfilePictureInfo {
    required string URL = 1;
    required string ID = 2;
    required string Type = 3;
    required string DirectPath = 4;
}
message NewsletterReactionSettings {
    enum NewsletterReactionsMode {
        ALL = 1;
        BASIC = 2;
        NONE = 3;
        BLOCKLIST = 4;
    }
    required NewsletterReactionsMode Value = 1;
}
message NewsletterSetting {
    required NewsletterReactionSettings ReactionCodes = 1;
}
message NewsletterThreadMetadata {
    enum NewsletterVerificationState {
        VERIFIED = 1;
        UNVERIFIED = 2;
    }
    required int64 CreationTime = 1;
    required string InviteCode = 2;
    required NewsletterText Name = 3;
    required NewsletterText Description = 4;
    required int64 SubscriberCount = 5;
    required NewsletterVerificationState VerificationState = 6;
    optional ProfilePictureInfo Picture = 7;
    required ProfilePictureInfo Preview = 8;
    required NewsletterSetting Settings = 9;

}
message NewsletterViewerMetadata {
    enum NewsletterMuteState {
        ON = 1;
        OFF = 2;
    }
    enum NewsletterRole {
        SUBSCRIBER = 1;
        GUEST = 2;
        ADMIN = 3;
        OWNER = 4;
    }
    required NewsletterMuteState Mute= 1;
    required NewsletterRole Role = 2;
}
message NewsletterMetadata {
    required JID ID = 1;
    required WrappedNewsletterState State = 2;
    required NewsletterThreadMetadata ThreadMeta = 3;
    optional NewsletterViewerMetadata ViewerMeta = 4;

}

message Blocklist {
    required string DHash = 1;
    repeated JID JIDs = 2;
}
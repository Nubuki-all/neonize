syntax = "proto2";
option go_package = "./neonize";
package neonize;
//types
message JID {
    required string User = 1;
    required uint32 RawAgent  = 2;
    required uint32 Device = 3;
    required uint32 Integrator= 4;
    required string Server=5;
}
message UploadResponse {
    required string url = 1;
    required string DirectPath = 2;
    required string Handle = 3;
    required bytes MediaKey = 4;
    required bytes FileEncSHA256 = 5;
    required bytes FileSHA256 = 6;
    required uint32 FileLength = 7;
}
message MessageSource {
    required JID Chat = 1;
    required JID Sender = 2;
    required bool IsFromMe = 3;
    required bool IsGroup = 4;
    required JID BroadcastListOwner = 5;
    required string ID = 6;
}
message DeviceSentMeta {
    required string DestinationJID = 1;
    required string Phash = 2;
}
message MessageInfo{
    required MessageSource MessageSource = 1;
    required string ID = 2;
    required string ServerID=3;
    required string Type = 4;
    required string PushName = 5;
    required uint64 Timestamp = 6;
    required string Category = 7;
    required bool Multicast = 8;
    required string MediaType = 9;
    required string EditAttribute = 10;

}




// GROUP
message GroupName {
    required string Name = 1;
    required int64 NameSetAt=2;
    required JID NameSetBy=3;
}
message GroupTopic{
    required string Topic = 1;
    required string TopicID = 2;
    required int64 TopicSetAt = 3;
    required JID TopicSetBy = 4;
    required bool TopicDeleted = 5;
}
message GroupLocked {
    required bool isLocked = 1;
}
message GroupAnnounce {
    required bool IsAnnounce = 1;
    required string AnnounceVersionID = 2;
}
message GroupEphemeral{
    required bool IsEphemeral = 1;
    required uint32 DisappearingTimer = 2;
}
message GroupIncognito{
    required bool IsIncognito = 1;
}
message GroupParent {
    required bool IsParent = 1;
    required string DefaultMembershipApprovalMode = 2;
}
message GroupLinkedParent {
    required JID LinkedParentJID = 1;
}
message GroupIsDefaultSub {
    required bool IsDefaultSubGroup = 1;
}
message GroupParticipantAddRequest {
    required string Code = 1;
    required float Expiration = 2;
}
message GroupParticipant {
    optional JID JID = 1;
    required JID LID = 2;
    required bool IsAdmin = 3;
    required bool IsSuperAdmin = 4;
    required string DisplayName = 5;
    required int32 Error = 6;
    optional GroupParticipantAddRequest AddRequest = 7;
}
message GroupInfo{
    required JID OwnerJID=2;
    required JID JID=1;
    required GroupName GroupName = 3;
    required GroupTopic GroupTopic = 4;
    required GroupLocked GroupLocked = 5;
    required GroupAnnounce GroupAnnounce = 6;
    required GroupEphemeral GroupEphemeral = 7;
    required GroupIncognito GroupIncognito = 8;
    required GroupParent GroupParent = 9;
    required GroupLinkedParent GroupLinkedParent = 10;
    required GroupIsDefaultSub GroupIsDefaultSub = 11;
    required float GroupCreated = 12;
    required string ParticipantVersionID = 13;
    repeated GroupParticipant Participants = 14;
    enum MemberAddMode {
        GroupMemberAddModeAdmin = 1;
    }
}
message MessageDebugTimings{
    required int64 Queue = 1;
    required int64 Marshal = 2;
    required int64 GetParticipants = 3;
    required int64 GetDevices = 4;
    required int64 GroupEncrypt = 5;
    required int64 PeerEncrypt = 6;
    required int64 Send = 7;
    required int64 Resp = 8;
    required int64 Retry = 9;
}
message SendResponse {
    required int64 Timestamp = 1;
    required string ID = 2;
    required int64 ServerID = 3;
    required MessageDebugTimings DebugTimings = 4;
}

message SendMessageReturnFunction {
    optional string Error = 1;
    optional SendResponse SendResponse = 2;
}








//Function
message GetGroupInfoReturnFunction{
    optional GroupInfo GroupInfo = 1;
    optional string Error = 2;
}
message JoinGroupWithLinkReturnFunction{
    optional string Error = 1;
    optional JID Jid = 2;
}
message GetGroupInviteLinkReturnFunction{
    optional string InviteLink = 1;
    optional string Error = 2;
}
message DownloadReturnFunction {
    optional bytes Binary = 1;
    optional string Error = 2;
}
message UploadReturnFunction {
    optional UploadResponse UploadResponse = 1;
    optional string Error = 2;
}
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: Neonize.proto

package neonize

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupInfo_MemberAddMode int32

const (
	GroupInfo_GroupMemberAddModeAdmin GroupInfo_MemberAddMode = 1
)

// Enum value maps for GroupInfo_MemberAddMode.
var (
	GroupInfo_MemberAddMode_name = map[int32]string{
		1: "GroupMemberAddModeAdmin",
	}
	GroupInfo_MemberAddMode_value = map[string]int32{
		"GroupMemberAddModeAdmin": 1,
	}
)

func (x GroupInfo_MemberAddMode) Enum() *GroupInfo_MemberAddMode {
	p := new(GroupInfo_MemberAddMode)
	*p = x
	return p
}

func (x GroupInfo_MemberAddMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupInfo_MemberAddMode) Descriptor() protoreflect.EnumDescriptor {
	return file_Neonize_proto_enumTypes[0].Descriptor()
}

func (GroupInfo_MemberAddMode) Type() protoreflect.EnumType {
	return &file_Neonize_proto_enumTypes[0]
}

func (x GroupInfo_MemberAddMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupInfo_MemberAddMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupInfo_MemberAddMode(num)
	return nil
}

// Deprecated: Use GroupInfo_MemberAddMode.Descriptor instead.
func (GroupInfo_MemberAddMode) EnumDescriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{16, 0}
}

type JID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       *string `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
	RawAgent   *uint32 `protobuf:"varint,2,req,name=RawAgent" json:"RawAgent,omitempty"`
	Device     *uint32 `protobuf:"varint,3,req,name=Device" json:"Device,omitempty"`
	Integrator *uint32 `protobuf:"varint,4,req,name=Integrator" json:"Integrator,omitempty"`
	Server     *string `protobuf:"bytes,5,req,name=Server" json:"Server,omitempty"`
}

func (x *JID) Reset() {
	*x = JID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JID) ProtoMessage() {}

func (x *JID) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JID.ProtoReflect.Descriptor instead.
func (*JID) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{0}
}

func (x *JID) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *JID) GetRawAgent() uint32 {
	if x != nil && x.RawAgent != nil {
		return *x.RawAgent
	}
	return 0
}

func (x *JID) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *JID) GetIntegrator() uint32 {
	if x != nil && x.Integrator != nil {
		return *x.Integrator
	}
	return 0
}

func (x *JID) GetServer() string {
	if x != nil && x.Server != nil {
		return *x.Server
	}
	return ""
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	DirectPath    *string `protobuf:"bytes,2,req,name=DirectPath" json:"DirectPath,omitempty"`
	Handle        *string `protobuf:"bytes,3,req,name=Handle" json:"Handle,omitempty"`
	MediaKey      []byte  `protobuf:"bytes,4,req,name=MediaKey" json:"MediaKey,omitempty"`
	FileEncSHA256 []byte  `protobuf:"bytes,5,req,name=FileEncSHA256" json:"FileEncSHA256,omitempty"`
	FileSHA256    []byte  `protobuf:"bytes,6,req,name=FileSHA256" json:"FileSHA256,omitempty"`
	FileLength    *uint32 `protobuf:"varint,7,req,name=FileLength" json:"FileLength,omitempty"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{1}
}

func (x *UploadResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *UploadResponse) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *UploadResponse) GetHandle() string {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return ""
}

func (x *UploadResponse) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *UploadResponse) GetFileEncSHA256() []byte {
	if x != nil {
		return x.FileEncSHA256
	}
	return nil
}

func (x *UploadResponse) GetFileSHA256() []byte {
	if x != nil {
		return x.FileSHA256
	}
	return nil
}

func (x *UploadResponse) GetFileLength() uint32 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

type MessageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chat               *JID    `protobuf:"bytes,1,req,name=Chat" json:"Chat,omitempty"`
	Sender             *JID    `protobuf:"bytes,2,req,name=Sender" json:"Sender,omitempty"`
	IsFromMe           *bool   `protobuf:"varint,3,req,name=IsFromMe" json:"IsFromMe,omitempty"`
	IsGroup            *bool   `protobuf:"varint,4,req,name=IsGroup" json:"IsGroup,omitempty"`
	BroadcastListOwner *JID    `protobuf:"bytes,5,req,name=BroadcastListOwner" json:"BroadcastListOwner,omitempty"`
	ID                 *string `protobuf:"bytes,6,req,name=ID" json:"ID,omitempty"`
}

func (x *MessageSource) Reset() {
	*x = MessageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSource) ProtoMessage() {}

func (x *MessageSource) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSource.ProtoReflect.Descriptor instead.
func (*MessageSource) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{2}
}

func (x *MessageSource) GetChat() *JID {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *MessageSource) GetSender() *JID {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MessageSource) GetIsFromMe() bool {
	if x != nil && x.IsFromMe != nil {
		return *x.IsFromMe
	}
	return false
}

func (x *MessageSource) GetIsGroup() bool {
	if x != nil && x.IsGroup != nil {
		return *x.IsGroup
	}
	return false
}

func (x *MessageSource) GetBroadcastListOwner() *JID {
	if x != nil {
		return x.BroadcastListOwner
	}
	return nil
}

func (x *MessageSource) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

type DeviceSentMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationJID *string `protobuf:"bytes,1,req,name=DestinationJID" json:"DestinationJID,omitempty"`
	Phash          *string `protobuf:"bytes,2,req,name=Phash" json:"Phash,omitempty"`
}

func (x *DeviceSentMeta) Reset() {
	*x = DeviceSentMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSentMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSentMeta) ProtoMessage() {}

func (x *DeviceSentMeta) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSentMeta.ProtoReflect.Descriptor instead.
func (*DeviceSentMeta) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceSentMeta) GetDestinationJID() string {
	if x != nil && x.DestinationJID != nil {
		return *x.DestinationJID
	}
	return ""
}

func (x *DeviceSentMeta) GetPhash() string {
	if x != nil && x.Phash != nil {
		return *x.Phash
	}
	return ""
}

type MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageSource *MessageSource `protobuf:"bytes,1,req,name=MessageSource" json:"MessageSource,omitempty"`
	ID            *string        `protobuf:"bytes,2,req,name=ID" json:"ID,omitempty"`
	ServerID      *string        `protobuf:"bytes,3,req,name=ServerID" json:"ServerID,omitempty"`
	Type          *string        `protobuf:"bytes,4,req,name=Type" json:"Type,omitempty"`
	PushName      *string        `protobuf:"bytes,5,req,name=PushName" json:"PushName,omitempty"`
	Timestamp     *uint64        `protobuf:"varint,6,req,name=Timestamp" json:"Timestamp,omitempty"`
	Category      *string        `protobuf:"bytes,7,req,name=Category" json:"Category,omitempty"`
	Multicast     *bool          `protobuf:"varint,8,req,name=Multicast" json:"Multicast,omitempty"`
	MediaType     *string        `protobuf:"bytes,9,req,name=MediaType" json:"MediaType,omitempty"`
	EditAttribute *string        `protobuf:"bytes,10,req,name=EditAttribute" json:"EditAttribute,omitempty"`
}

func (x *MessageInfo) Reset() {
	*x = MessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInfo) ProtoMessage() {}

func (x *MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInfo.ProtoReflect.Descriptor instead.
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{4}
}

func (x *MessageInfo) GetMessageSource() *MessageSource {
	if x != nil {
		return x.MessageSource
	}
	return nil
}

func (x *MessageInfo) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *MessageInfo) GetServerID() string {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return ""
}

func (x *MessageInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MessageInfo) GetPushName() string {
	if x != nil && x.PushName != nil {
		return *x.PushName
	}
	return ""
}

func (x *MessageInfo) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *MessageInfo) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *MessageInfo) GetMulticast() bool {
	if x != nil && x.Multicast != nil {
		return *x.Multicast
	}
	return false
}

func (x *MessageInfo) GetMediaType() string {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ""
}

func (x *MessageInfo) GetEditAttribute() string {
	if x != nil && x.EditAttribute != nil {
		return *x.EditAttribute
	}
	return ""
}

// GROUP
type GroupName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string  `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	NameSetAt *float32 `protobuf:"fixed32,2,req,name=NameSetAt" json:"NameSetAt,omitempty"`
	NameSetBy *JID     `protobuf:"bytes,3,req,name=NameSetBy" json:"NameSetBy,omitempty"`
}

func (x *GroupName) Reset() {
	*x = GroupName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupName) ProtoMessage() {}

func (x *GroupName) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupName.ProtoReflect.Descriptor instead.
func (*GroupName) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{5}
}

func (x *GroupName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GroupName) GetNameSetAt() float32 {
	if x != nil && x.NameSetAt != nil {
		return *x.NameSetAt
	}
	return 0
}

func (x *GroupName) GetNameSetBy() *JID {
	if x != nil {
		return x.NameSetBy
	}
	return nil
}

type GroupTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic        *string  `protobuf:"bytes,1,req,name=Topic" json:"Topic,omitempty"`
	TopicID      *string  `protobuf:"bytes,2,req,name=TopicID" json:"TopicID,omitempty"`
	TopicSetAt   *float32 `protobuf:"fixed32,3,req,name=TopicSetAt" json:"TopicSetAt,omitempty"`
	TopicSetBy   *JID     `protobuf:"bytes,4,req,name=TopicSetBy" json:"TopicSetBy,omitempty"`
	TopicDeleted *bool    `protobuf:"varint,5,req,name=TopicDeleted" json:"TopicDeleted,omitempty"`
}

func (x *GroupTopic) Reset() {
	*x = GroupTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTopic) ProtoMessage() {}

func (x *GroupTopic) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTopic.ProtoReflect.Descriptor instead.
func (*GroupTopic) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{6}
}

func (x *GroupTopic) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *GroupTopic) GetTopicID() string {
	if x != nil && x.TopicID != nil {
		return *x.TopicID
	}
	return ""
}

func (x *GroupTopic) GetTopicSetAt() float32 {
	if x != nil && x.TopicSetAt != nil {
		return *x.TopicSetAt
	}
	return 0
}

func (x *GroupTopic) GetTopicSetBy() *JID {
	if x != nil {
		return x.TopicSetBy
	}
	return nil
}

func (x *GroupTopic) GetTopicDeleted() bool {
	if x != nil && x.TopicDeleted != nil {
		return *x.TopicDeleted
	}
	return false
}

type GroupLocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLocked *bool `protobuf:"varint,1,req,name=isLocked" json:"isLocked,omitempty"`
}

func (x *GroupLocked) Reset() {
	*x = GroupLocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLocked) ProtoMessage() {}

func (x *GroupLocked) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLocked.ProtoReflect.Descriptor instead.
func (*GroupLocked) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{7}
}

func (x *GroupLocked) GetIsLocked() bool {
	if x != nil && x.IsLocked != nil {
		return *x.IsLocked
	}
	return false
}

type GroupAnnounce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAnnounce        *bool   `protobuf:"varint,1,req,name=IsAnnounce" json:"IsAnnounce,omitempty"`
	AnnounceVersionID *string `protobuf:"bytes,2,req,name=AnnounceVersionID" json:"AnnounceVersionID,omitempty"`
}

func (x *GroupAnnounce) Reset() {
	*x = GroupAnnounce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAnnounce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAnnounce) ProtoMessage() {}

func (x *GroupAnnounce) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAnnounce.ProtoReflect.Descriptor instead.
func (*GroupAnnounce) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{8}
}

func (x *GroupAnnounce) GetIsAnnounce() bool {
	if x != nil && x.IsAnnounce != nil {
		return *x.IsAnnounce
	}
	return false
}

func (x *GroupAnnounce) GetAnnounceVersionID() string {
	if x != nil && x.AnnounceVersionID != nil {
		return *x.AnnounceVersionID
	}
	return ""
}

type GroupEphemeral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEphemeral       *bool   `protobuf:"varint,1,req,name=IsEphemeral" json:"IsEphemeral,omitempty"`
	DisappearingTimer *uint32 `protobuf:"varint,2,req,name=DisappearingTimer" json:"DisappearingTimer,omitempty"`
}

func (x *GroupEphemeral) Reset() {
	*x = GroupEphemeral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupEphemeral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupEphemeral) ProtoMessage() {}

func (x *GroupEphemeral) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupEphemeral.ProtoReflect.Descriptor instead.
func (*GroupEphemeral) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{9}
}

func (x *GroupEphemeral) GetIsEphemeral() bool {
	if x != nil && x.IsEphemeral != nil {
		return *x.IsEphemeral
	}
	return false
}

func (x *GroupEphemeral) GetDisappearingTimer() uint32 {
	if x != nil && x.DisappearingTimer != nil {
		return *x.DisappearingTimer
	}
	return 0
}

type GroupIncognito struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsIncognito *bool `protobuf:"varint,1,req,name=IsIncognito" json:"IsIncognito,omitempty"`
}

func (x *GroupIncognito) Reset() {
	*x = GroupIncognito{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIncognito) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIncognito) ProtoMessage() {}

func (x *GroupIncognito) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIncognito.ProtoReflect.Descriptor instead.
func (*GroupIncognito) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{10}
}

func (x *GroupIncognito) GetIsIncognito() bool {
	if x != nil && x.IsIncognito != nil {
		return *x.IsIncognito
	}
	return false
}

type GroupParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsParent                      *bool   `protobuf:"varint,1,req,name=IsParent" json:"IsParent,omitempty"`
	DefaultMembershipApprovalMode *string `protobuf:"bytes,2,req,name=DefaultMembershipApprovalMode" json:"DefaultMembershipApprovalMode,omitempty"`
}

func (x *GroupParent) Reset() {
	*x = GroupParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupParent) ProtoMessage() {}

func (x *GroupParent) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupParent.ProtoReflect.Descriptor instead.
func (*GroupParent) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{11}
}

func (x *GroupParent) GetIsParent() bool {
	if x != nil && x.IsParent != nil {
		return *x.IsParent
	}
	return false
}

func (x *GroupParent) GetDefaultMembershipApprovalMode() string {
	if x != nil && x.DefaultMembershipApprovalMode != nil {
		return *x.DefaultMembershipApprovalMode
	}
	return ""
}

type GroupLinkedParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedParentJID *JID `protobuf:"bytes,1,req,name=LinkedParentJID" json:"LinkedParentJID,omitempty"`
}

func (x *GroupLinkedParent) Reset() {
	*x = GroupLinkedParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLinkedParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLinkedParent) ProtoMessage() {}

func (x *GroupLinkedParent) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLinkedParent.ProtoReflect.Descriptor instead.
func (*GroupLinkedParent) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{12}
}

func (x *GroupLinkedParent) GetLinkedParentJID() *JID {
	if x != nil {
		return x.LinkedParentJID
	}
	return nil
}

type GroupIsDefaultSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDefaultSubGroup *bool `protobuf:"varint,1,req,name=IsDefaultSubGroup" json:"IsDefaultSubGroup,omitempty"`
}

func (x *GroupIsDefaultSub) Reset() {
	*x = GroupIsDefaultSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIsDefaultSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIsDefaultSub) ProtoMessage() {}

func (x *GroupIsDefaultSub) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIsDefaultSub.ProtoReflect.Descriptor instead.
func (*GroupIsDefaultSub) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{13}
}

func (x *GroupIsDefaultSub) GetIsDefaultSubGroup() bool {
	if x != nil && x.IsDefaultSubGroup != nil {
		return *x.IsDefaultSubGroup
	}
	return false
}

type GroupParticipantAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       *string  `protobuf:"bytes,1,req,name=Code" json:"Code,omitempty"`
	Expiration *float32 `protobuf:"fixed32,2,req,name=Expiration" json:"Expiration,omitempty"`
}

func (x *GroupParticipantAddRequest) Reset() {
	*x = GroupParticipantAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupParticipantAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupParticipantAddRequest) ProtoMessage() {}

func (x *GroupParticipantAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupParticipantAddRequest.ProtoReflect.Descriptor instead.
func (*GroupParticipantAddRequest) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{14}
}

func (x *GroupParticipantAddRequest) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *GroupParticipantAddRequest) GetExpiration() float32 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

type GroupParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID          *JID                        `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	ID           *JID                        `protobuf:"bytes,2,req,name=ID" json:"ID,omitempty"`
	IsAdmin      *bool                       `protobuf:"varint,3,req,name=IsAdmin" json:"IsAdmin,omitempty"`
	IsSuperAdmin *bool                       `protobuf:"varint,4,req,name=IsSuperAdmin" json:"IsSuperAdmin,omitempty"`
	DisplayName  *string                     `protobuf:"bytes,5,req,name=DisplayName" json:"DisplayName,omitempty"`
	Error        *int32                      `protobuf:"varint,6,req,name=Error" json:"Error,omitempty"`
	AddRequest   *GroupParticipantAddRequest `protobuf:"bytes,7,req,name=AddRequest" json:"AddRequest,omitempty"`
}

func (x *GroupParticipant) Reset() {
	*x = GroupParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupParticipant) ProtoMessage() {}

func (x *GroupParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupParticipant.ProtoReflect.Descriptor instead.
func (*GroupParticipant) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{15}
}

func (x *GroupParticipant) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *GroupParticipant) GetID() *JID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *GroupParticipant) GetIsAdmin() bool {
	if x != nil && x.IsAdmin != nil {
		return *x.IsAdmin
	}
	return false
}

func (x *GroupParticipant) GetIsSuperAdmin() bool {
	if x != nil && x.IsSuperAdmin != nil {
		return *x.IsSuperAdmin
	}
	return false
}

func (x *GroupParticipant) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *GroupParticipant) GetError() int32 {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return 0
}

func (x *GroupParticipant) GetAddRequest() *GroupParticipantAddRequest {
	if x != nil {
		return x.AddRequest
	}
	return nil
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID                  *JID                `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	OwnerJID             *JID                `protobuf:"bytes,2,req,name=OwnerJID" json:"OwnerJID,omitempty"`
	GroupName            *GroupName          `protobuf:"bytes,3,req,name=GroupName" json:"GroupName,omitempty"`
	GroupTopic           *GroupTopic         `protobuf:"bytes,4,req,name=GroupTopic" json:"GroupTopic,omitempty"`
	GroupLocked          *GroupLocked        `protobuf:"bytes,5,req,name=GroupLocked" json:"GroupLocked,omitempty"`
	GroupAnnounce        *GroupAnnounce      `protobuf:"bytes,6,req,name=GroupAnnounce" json:"GroupAnnounce,omitempty"`
	GroupEphemeral       *GroupEphemeral     `protobuf:"bytes,7,req,name=GroupEphemeral" json:"GroupEphemeral,omitempty"`
	GroupIncognito       *GroupIncognito     `protobuf:"bytes,8,req,name=GroupIncognito" json:"GroupIncognito,omitempty"`
	GroupParent          *GroupParent        `protobuf:"bytes,9,req,name=GroupParent" json:"GroupParent,omitempty"`
	GroupLinkedParent    *GroupLinkedParent  `protobuf:"bytes,10,req,name=GroupLinkedParent" json:"GroupLinkedParent,omitempty"`
	GroupIsDefaultSub    *GroupIsDefaultSub  `protobuf:"bytes,11,req,name=GroupIsDefaultSub" json:"GroupIsDefaultSub,omitempty"`
	GroupCreated         *float32            `protobuf:"fixed32,12,req,name=GroupCreated" json:"GroupCreated,omitempty"`
	ParticipantVersionID *string             `protobuf:"bytes,13,req,name=ParticipantVersionID" json:"ParticipantVersionID,omitempty"`
	Participants         []*GroupParticipant `protobuf:"bytes,14,rep,name=Participants" json:"Participants,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Neonize_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Neonize_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_Neonize_proto_rawDescGZIP(), []int{16}
}

func (x *GroupInfo) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *GroupInfo) GetOwnerJID() *JID {
	if x != nil {
		return x.OwnerJID
	}
	return nil
}

func (x *GroupInfo) GetGroupName() *GroupName {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *GroupInfo) GetGroupTopic() *GroupTopic {
	if x != nil {
		return x.GroupTopic
	}
	return nil
}

func (x *GroupInfo) GetGroupLocked() *GroupLocked {
	if x != nil {
		return x.GroupLocked
	}
	return nil
}

func (x *GroupInfo) GetGroupAnnounce() *GroupAnnounce {
	if x != nil {
		return x.GroupAnnounce
	}
	return nil
}

func (x *GroupInfo) GetGroupEphemeral() *GroupEphemeral {
	if x != nil {
		return x.GroupEphemeral
	}
	return nil
}

func (x *GroupInfo) GetGroupIncognito() *GroupIncognito {
	if x != nil {
		return x.GroupIncognito
	}
	return nil
}

func (x *GroupInfo) GetGroupParent() *GroupParent {
	if x != nil {
		return x.GroupParent
	}
	return nil
}

func (x *GroupInfo) GetGroupLinkedParent() *GroupLinkedParent {
	if x != nil {
		return x.GroupLinkedParent
	}
	return nil
}

func (x *GroupInfo) GetGroupIsDefaultSub() *GroupIsDefaultSub {
	if x != nil {
		return x.GroupIsDefaultSub
	}
	return nil
}

func (x *GroupInfo) GetGroupCreated() float32 {
	if x != nil && x.GroupCreated != nil {
		return *x.GroupCreated
	}
	return 0
}

func (x *GroupInfo) GetParticipantVersionID() string {
	if x != nil && x.ParticipantVersionID != nil {
		return *x.ParticipantVersionID
	}
	return ""
}

func (x *GroupInfo) GetParticipants() []*GroupParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

var File_Neonize_proto protoreflect.FileDescriptor

var file_Neonize_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x4e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x03, 0x4a, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x61, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x65, 0x45, 0x6e, 0x63, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0xdb, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x04, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49,
	0x44, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x3c, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4e, 0x0a,
	0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc3, 0x02,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a,
	0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x64, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x22, 0x69, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x41, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e,
	0x4a, 0x49, 0x44, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x22, 0xae,
	0x01, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x41, 0x74, 0x12, 0x2c, 0x0a,
	0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x42, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52,
	0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x0c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x29, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x5d, 0x0a, 0x0d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x0e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x0b, 0x49, 0x73, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x0e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x22,
	0x6f, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x08, 0x49, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x1d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x4b, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x0f, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x49, 0x44, 0x22, 0x41, 0x0a,
	0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x75, 0x62, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x11, 0x49,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x50, 0x0a, 0x1a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8b, 0x02, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a,
	0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49,
	0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xc5, 0x06, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x08, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x08,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x36, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x18, 0x0b,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62,
	0x52, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x75, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0c, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x0d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65,
}

var (
	file_Neonize_proto_rawDescOnce sync.Once
	file_Neonize_proto_rawDescData = file_Neonize_proto_rawDesc
)

func file_Neonize_proto_rawDescGZIP() []byte {
	file_Neonize_proto_rawDescOnce.Do(func() {
		file_Neonize_proto_rawDescData = protoimpl.X.CompressGZIP(file_Neonize_proto_rawDescData)
	})
	return file_Neonize_proto_rawDescData
}

var file_Neonize_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Neonize_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_Neonize_proto_goTypes = []interface{}{
	(GroupInfo_MemberAddMode)(0),       // 0: neonize.GroupInfo.MemberAddMode
	(*JID)(nil),                        // 1: neonize.JID
	(*UploadResponse)(nil),             // 2: neonize.UploadResponse
	(*MessageSource)(nil),              // 3: neonize.MessageSource
	(*DeviceSentMeta)(nil),             // 4: neonize.DeviceSentMeta
	(*MessageInfo)(nil),                // 5: neonize.MessageInfo
	(*GroupName)(nil),                  // 6: neonize.GroupName
	(*GroupTopic)(nil),                 // 7: neonize.GroupTopic
	(*GroupLocked)(nil),                // 8: neonize.GroupLocked
	(*GroupAnnounce)(nil),              // 9: neonize.GroupAnnounce
	(*GroupEphemeral)(nil),             // 10: neonize.GroupEphemeral
	(*GroupIncognito)(nil),             // 11: neonize.GroupIncognito
	(*GroupParent)(nil),                // 12: neonize.GroupParent
	(*GroupLinkedParent)(nil),          // 13: neonize.GroupLinkedParent
	(*GroupIsDefaultSub)(nil),          // 14: neonize.GroupIsDefaultSub
	(*GroupParticipantAddRequest)(nil), // 15: neonize.GroupParticipantAddRequest
	(*GroupParticipant)(nil),           // 16: neonize.GroupParticipant
	(*GroupInfo)(nil),                  // 17: neonize.GroupInfo
}
var file_Neonize_proto_depIdxs = []int32{
	1,  // 0: neonize.MessageSource.Chat:type_name -> neonize.JID
	1,  // 1: neonize.MessageSource.Sender:type_name -> neonize.JID
	1,  // 2: neonize.MessageSource.BroadcastListOwner:type_name -> neonize.JID
	3,  // 3: neonize.MessageInfo.MessageSource:type_name -> neonize.MessageSource
	1,  // 4: neonize.GroupName.NameSetBy:type_name -> neonize.JID
	1,  // 5: neonize.GroupTopic.TopicSetBy:type_name -> neonize.JID
	1,  // 6: neonize.GroupLinkedParent.LinkedParentJID:type_name -> neonize.JID
	1,  // 7: neonize.GroupParticipant.JID:type_name -> neonize.JID
	1,  // 8: neonize.GroupParticipant.ID:type_name -> neonize.JID
	15, // 9: neonize.GroupParticipant.AddRequest:type_name -> neonize.GroupParticipantAddRequest
	1,  // 10: neonize.GroupInfo.JID:type_name -> neonize.JID
	1,  // 11: neonize.GroupInfo.OwnerJID:type_name -> neonize.JID
	6,  // 12: neonize.GroupInfo.GroupName:type_name -> neonize.GroupName
	7,  // 13: neonize.GroupInfo.GroupTopic:type_name -> neonize.GroupTopic
	8,  // 14: neonize.GroupInfo.GroupLocked:type_name -> neonize.GroupLocked
	9,  // 15: neonize.GroupInfo.GroupAnnounce:type_name -> neonize.GroupAnnounce
	10, // 16: neonize.GroupInfo.GroupEphemeral:type_name -> neonize.GroupEphemeral
	11, // 17: neonize.GroupInfo.GroupIncognito:type_name -> neonize.GroupIncognito
	12, // 18: neonize.GroupInfo.GroupParent:type_name -> neonize.GroupParent
	13, // 19: neonize.GroupInfo.GroupLinkedParent:type_name -> neonize.GroupLinkedParent
	14, // 20: neonize.GroupInfo.GroupIsDefaultSub:type_name -> neonize.GroupIsDefaultSub
	16, // 21: neonize.GroupInfo.Participants:type_name -> neonize.GroupParticipant
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_Neonize_proto_init() }
func file_Neonize_proto_init() {
	if File_Neonize_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Neonize_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSentMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAnnounce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupEphemeral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIncognito); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLinkedParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIsDefaultSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupParticipantAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Neonize_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Neonize_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Neonize_proto_goTypes,
		DependencyIndexes: file_Neonize_proto_depIdxs,
		EnumInfos:         file_Neonize_proto_enumTypes,
		MessageInfos:      file_Neonize_proto_msgTypes,
	}.Build()
	File_Neonize_proto = out.File
	file_Neonize_proto_rawDesc = nil
	file_Neonize_proto_goTypes = nil
	file_Neonize_proto_depIdxs = nil
}
